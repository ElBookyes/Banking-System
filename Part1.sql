CREATE TABLE EMPLOYEE (
EMPLOYEE_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
FIRST_NAME VARCHAR2(100) NOT NULL,
LAST_NAME VARCHAR2(100),
EXTRA_NAME VARCHAR2(100),
ADDRESS VARCHAR2(100),
MOBILE_PHONE VARCHAR2(100),
EMAIL VARCHAR2(100),
SECTOR VARCHAR2(100),
DEPARTMENT VARCHAR2(100),
MANAGER_ID NUMBER NULL,
CONSTRAINT FK_MANAGER FOREIGN KEY (MANAGER_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID)
);

CREATE TABLE DEPARTMENT (
DEPARTMENT_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY NOT NULL,
DEPARTMENT_NAME VARCHAR2(100)
);

CREATE TABLE CLIENTS (
CLIENT_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
FIRST_NAME VARCHAR2(100) NOT NULL,
LAST_NAME VARCHAR2(100),
EXTRA_NAME VARCHAR2(100),
ADDRESS VARCHAR2(100),
MOBILE_PHONE VARCHAR2(100),
EMAIL VARCHAR2(100),
UNIQUE(FIRST_NAME, LAST_NAME, EXTRA_NAME, ADDRESS),
CHECK (MOBILE_PHONE IS NOT NULL)
)

CREATE TABLE ACCOUNTS (
    ACCOUNT_ID NUMBER GENERATED ALWAYS AS IDENTITY,
    CLIENT_ID NUMBER,
    BALANCE NUMBER,
    CURRENCY VARCHAR2(3) DEFAULT 'BGN',
    PRIMARY KEY (ACCOUNT_ID),
    FOREIGN KEY (CLIENT_ID) REFERENCES CLIENTS(CLIENT_ID)
);

INSERT INTO EMPLOYEE (FIRST_NAME, LAST_NAME, EXTRA_NAME, ADDRESS, MOBILE_PHONE, EMAIL, SECTOR, DEPARTMENT, MANAGER_ID) 
VALUES ('John', 'Doe', NULL, '123 Main St, City', '1234567890', 'john.doe@example.com', 'Operations', 'Finance', NULL);

INSERT INTO EMPLOYEE (FIRST_NAME, LAST_NAME, EXTRA_NAME, ADDRESS, MOBILE_PHONE, EMAIL, SECTOR, DEPARTMENT, MANAGER_ID) 
VALUES ('Jane', 'Smith', NULL, '456 Elm St, Town', '9876543210', 'jane.smith@example.com', 'Operations', 'Finance', 1);

INSERT INTO EMPLOYEE (FIRST_NAME, LAST_NAME, EXTRA_NAME, ADDRESS, MOBILE_PHONE, EMAIL, SECTOR, DEPARTMENT, MANAGER_ID) 
VALUES ('Michael', 'Johnson', 'C.', '789 Oak St, Village', '5555555555', 'michael.johnson@example.com', 'Credit', 'Loan', NULL);

INSERT INTO EMPLOYEE (FIRST_NAME, LAST_NAME, EXTRA_NAME, ADDRESS, MOBILE_PHONE, EMAIL, SECTOR, DEPARTMENT, MANAGER_ID) 
VALUES ('Emily', 'Williams', NULL, '101 Pine St, Countryside', '7777777777', 'emily.williams@example.com', 'Credit', 'Loan', 3);

INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('Finance');
INSERT INTO DEPARTMENT (DEPARTMENT_NAME) VALUES ('Loan');

INSERT INTO CLIENTS (FIRST_NAME, LAST_NAME, EXTRA_NAME, ADDRESS, MOBILE_PHONE, EMAIL, ACCOUNT_NUMBER, BALANCE, CURRENCY) VALUES
('David', 'Brown', NULL, '111 Maple St, City', '1231231234', 'david.brown@example.com', '123456789', 1000.00, 'USD');

INSERT INTO CLIENTS (FIRST_NAME, LAST_NAME, EXTRA_NAME, ADDRESS, MOBILE_PHONE, EMAIL, ACCOUNT_NUMBER, BALANCE, CURRENCY) VALUES
('Sarah', 'Johnson', 'M.', '222 Walnut St, Town', '4564564567', 'sarah.johnson@example.com', '987654321', 500.00, 'EUR');

INSERT INTO CLIENTS (FIRST_NAME, LAST_NAME, EXTRA_NAME, ADDRESS, MOBILE_PHONE, EMAIL, ACCOUNT_NUMBER, BALANCE, CURRENCY) VALUES
('James', 'Wilson', NULL, '333 Cherry St, Village', '7897897890', 'james.wilson@example.com', '246813579', 250.00, 'GBP');

INSERT INTO ACCOUNTS (CLIENT_ID, BALANCE, CURRENCY) VALUES (1, 1000.00, 'USD');

INSERT INTO ACCOUNTS (CLIENT_ID, BALANCE, CURRENCY) VALUES (2, 3000, 'EUR');

INSERT INTO ACCOUNTS (CLIENT_ID, BALANCE, CURRENCY) VALUES (3, 750, 'GBP');

INSERT INTO ACCOUNTS (CLIENT_ID, BALANCE) VALUES (1, 10000);

INSERT INTO ACCOUNTS (CLIENT_ID, BALANCE, CURRENCY) VALUES (6, 2000, 'CAD');

INSERT INTO ACCOUNTS (CLIENT_ID, BALANCE, CURRENCY) VALUES (7, 25000, 'CHF');

INSERT INTO ACCOUNTS (CLIENT_ID, BALANCE, CURRENCY) VALUES (8, 6000, 'HKD');

INSERT INTO ACCOUNTS (CLIENT_ID, BALANCE, CURRENCY) VALUES (9, 9500, 'SGD');

INSERT INTO ACCOUNTS (CLIENT_ID, BALANCE, CURRENCY) VALUES (10, 800, 'NZD');

INSERT INTO ACCOUNTS (CLIENT_ID, BALANCE) VALUES (4, 20);



--BUSINESS QUERIES 1

--1. List the names of all departments

SELECT DEPARTMENT_NAME
FROM DEPARTMENT;

--2. List the monthly salaries of all employees. The listing should include both the first and last names of the employee along with their salary.

ALTER TABLE EMPLOYEE ADD SALARY NUMBER;

UPDATE EMPLOYEE
SET SALARY = 5000;

SELECT FIRST_NAME || ' ' || LAST_NAME AS EMPLOYEE_NAME, SALARY
FROM EMPLOYEE;

--3. Create a listing of all employees in the bank, including their first and last names along with newly generated emails, which consist of concatenated first and last names seperated by a dot.

SELECT FIRST_NAME, LAST_NAME,
       LOWER(FIRST_NAME) || '.' || LOWER(LAST_NAME) || '@bankoftomorrow.bg' AS EMAIL
FROM EMPLOYEE;

--4. Find all employees that the bank defines as senior employees, which are those who have been working in the company for 5 years

ALTER TABLE EMPLOYEE
ADD HIRE_DATE DATE;

SELECT *
FROM EMPLOYEE
WHERE (SYSDATE - HIRE_DATE) >= 1825; 

--5. Find all employees whose first, last, or additional names contain the letter 'i'
SELECT *
FROM EMPLOYEE
WHERE FIRST_NAME LIKE '%i%' OR LAST_NAME LIKE '%i%' OR EXTRA_NAME LIKE '%i%';

--BUSINESS QUERIES 2

CREATE TABLE EMPLOYEE_MOVEMENT (
    MOVEMENT_ID NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    EMPLOYEE_ID NUMBER,
    DEPARTMENT_FROM VARCHAR2(100),
    DEPARTMENT_TO VARCHAR2(100),
    MOVEMENT_DATE DATE,
    CONSTRAINT FK_EMPLOYEE_MOVEMENT_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID)
);

--1. Realize example inserts

INSERT INTO EMPLOYEE_MOVEMENT (EMPLOYEE_ID, DEPARTMENT_FROM, DEPARTMENT_TO, MOVEMENT_DATE)
VALUES (1, '����� A', '����� B', TO_DATE('2024-01-01', 'YYYY-MM-DD'));

INSERT INTO EMPLOYEE_MOVEMENT (EMPLOYEE_ID, DEPARTMENT_FROM, DEPARTMENT_TO, MOVEMENT_DATE)
VALUES (2, '����� C', '����� D', TO_DATE('2024-02-15', 'YYYY-MM-DD'));

INSERT INTO EMPLOYEE_MOVEMENT (EMPLOYEE_ID, DEPARTMENT_FROM, DEPARTMENT_TO, MOVEMENT_DATE)
VALUES (3, '����� B', '����� C', TO_DATE('2024-03-10', 'YYYY-MM-DD'));

INSERT INTO EMPLOYEE_MOVEMENT (EMPLOYEE_ID, DEPARTMENT_FROM, DEPARTMENT_TO, MOVEMENT_DATE)
VALUES (3, 'Department X', 'Department Y', TO_DATE('2024-02-10', 'YYYY-MM-DD'));

INSERT INTO EMPLOYEE_MOVEMENT (EMPLOYEE_ID, DEPARTMENT_FROM, DEPARTMENT_TO, MOVEMENT_DATE)
VALUES (3, 'Department Y', 'Department Z', TO_DATE('2024-03-01', 'YYYY-MM-DD'));

--2. Implement a listing of employees who have worked in more than one department within the last two months

SELECT DISTINCT E.FIRST_NAME, E.LAST_NAME
FROM EMPLOYEE E
JOIN EMPLOYEE_MOVEMENT M1 ON E.EMPLOYEE_ID = M1.EMPLOYEE_ID
JOIN EMPLOYEE_MOVEMENT M2 ON E.EMPLOYEE_ID = M2.EMPLOYEE_ID
WHERE M1.MOVEMENT_DATE >= TRUNC(SYSDATE) - INTERVAL '2' MONTH
AND M2.MOVEMENT_DATE >= TRUNC(SYSDATE) - INTERVAL '2' MONTH
AND M1.DEPARTMENT_TO <> M2.DEPARTMENT_TO
ORDER BY E.LAST_NAME, E.FIRST_NAME;

--3. Implement a listing of employees who have worked only in one department since they became part of the company's structure

SELECT E.FIRST_NAME, E.LAST_NAME
FROM EMPLOYEE E
LEFT JOIN EMPLOYEE_MOVEMENT M ON E.EMPLOYEE_ID = M.EMPLOYEE_ID
GROUP BY E.FIRST_NAME, E.LAST_NAME
HAVING COUNT(DISTINCT M.DEPARTMENT_FROM) = 1
AND COUNT(DISTINCT M.DEPARTMENT_TO) = 1;

--BUSINESS QUERIES 3

-- 1 �� �� ��������� ������� �������� ������ ��������� ����� �� ���� �������� �� ����������
ALTER TABLE EMPLOYEE ADD STATUS varchar2(25);

ALTER TABLE MPLOYEE
ADD CONSTRAINT chk_status CHECK (STATUS IN ('sick', 'injured', 'motherhood', 'fired'));

UPDATE EMPLOYEE SET STATUS = 'sick' WHERE EMPLOYEE_ID = 1;
UPDATE EMPLOYEE SET STATUS = 'injured' WHERE EMPLOYEE_ID = 6;
UPDATE EMPLOYEE SET STATUS = 'motherhood' WHERE EMPLOYEE_ID = 2;
UPDATE EMPLOYEE SET STATUS = 'fired' WHERE EMPLOYEE_ID = 9;

SELECT *
FROM EMPLOYEE
WHERE STATUS = 'fired';
-- 2 �� �� ��������� ������� �� ������ ��������� ����� �� � ���������� � �������.
SELECT *
FROM EMPLOYEE
WHERE STATUS = 'motherhood';
-- 3 �� �� ��������� ������� �� ������ ��������� ����� �� � ������� / �������� � �������
SELECT *
FROM EMPLOYEE
WHERE STATUS ='sick' OR STATUS='motherhood';
-- 4 �������� ������ ��������� ����� ����� �����������
SELECT *
FROM EMPLOYEE
WHERE MANAGER_ID IS NULL;

-- 5 �������� ������ ������ ��������� ����� ��������� ������� �� ������ �� 5000 ��. 
--��������� �� � ������� ������� ���, ���� �� ��� ������� ������� ����� ���.

SELECT *
FROM EMPLOYEE
WHERE HIRE_DATE <= ADD_MONTHS(SYSDATE, -12*5) AND SALARY > 5000
ORDER BY FIRST_NAME DESC;

-- 6 �������� �������� ���-������������� ��������� ��� ����� �����. 
--���������� �� �� ������.

WITH RankedEmployees AS (
SELECT E.*, D.DEPARTMENT_NAME, ROW_NUMBER() OVER (PARTITION BY E.DEPARTMENT ORDER BY E.SALARY DESC) AS Row_Num
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DEPARTMENT = D.DEPARTMENT_NAME
)
SELECT DEPARTMENT_NAME, FIRST_NAME, LAST_NAME, SALARY
FROM RankedEmployees
WHERE Row_Num <= 5;

-- 7 �������� ������ ��� ��������, � ����� / ����� �����������
-- ������� ��������� ���-����� �������.

SELECT D.DEPARTMENT_NAME, SUM(E.SALARY) AS Total_Salary
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DEPARTMENT = D.DEPARTMENT_NAME
GROUP BY D.DEPARTMENT_NAME
ORDER BY Total_Salary;

-- 8 �������� �������� ������� ��� ����� �����, ���������� �� ����� �
--��������� �������� �������
SELECT D.DEPARTMENT_NAME, AVG(E.SALARY) AS Average_Salary
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DEPARTMENT = D.DEPARTMENT_NAME
GROUP BY D.DEPARTMENT_NAME;

--BUSINESS QUERIES 4

--1 �� �� ������� ������ ������� ����� ���� ������ ��� ������. ( ��������
--�� BGN )
SELECT *
FROM CLIENTS
WHERE Currency != 'BGN';

--2 �� �� ������� ������ ������� ����� ���� ������ � ������ �������
--�����. ������� �����.
SELECT *
FROM CLIENTS
WHERE Balance = 0;










